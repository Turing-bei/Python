Python基础

1.Python概述

-计算机语言概述
	-语言：交流的工具，沟通的媒介
	-计算机语言：人跟计算机交流的工具，翻译官	
	-Python是计算语言里的一种

-Python编程语言
	-代码：人类语言，通过代码命令机器，跟机器交流
	-python解析器：就是那个担任翻译工作的二狗子同学
	-流程：
		-写代码
		-执行：由翻译官（python解析器）把命令（code）翻译给机器，同时把机器结果翻译给我们

-Python简史
	-1989年：Guid van Rossum发布python

	-2008年：python3.0诞生

	-2014年：宣布2.7支持到2020年

	-2017年：AI元年，python崛起

-Python的执行方式
	-本质上Python是一堆命令的集合
		-执行过程是逐行执行，遇到问题即刻终止
		-打印Hello world

		print('hello world')

#注释
	-机器不去执行注释内容
	-注释一般用自然语言书写
	-注释的写法：
		-行注释：以井号开头，可以单独行，也可以在某行代码后边用井号写注释。

		-块注释：好几行代码或者内容，以三个连续单引号或双引号开始和结束，中间内容解析器都会忽略。

	--------python代码演示-------
	#代码的作用
	#1.给人看
	#2.给机器看
	#注释是纯给人看的内容
	print('hello world')
	#打印出来hello world出来
	#行注释
	'''
	这里边任何内容编译器都不管
	我可以写好多
	好多 块注释
	'''

#变量
	-程序 = 数据结构+算法
	-变量就是可以重复使用的一个量，或者叫一个代号
	-变量命名的规则
		-变量命名可以包含数字，大小写字母，下划线或者更多，但是我们不推荐除了前三种内容之外的符号

		-数字不可以打头
			-4man，5for 是不可以的

			-man4，for5是可以的

		-一般在python中，以下划线开头的内容具有特殊含义，不建议使用
			-比如 _age，_name，理论可以，但强烈不推荐包括但不限于一个下划线开头和两个连续下划线开头

		-大小写不一样，俗称大小写敏感
			-ForMan 跟 forMan 不是一个变量名称

	-推荐
		-使用具有固定含义的英文单词或者缩写，srv = server
		skt = socket 一般以posix命名规则为主

		-驼峰命名法
			
			-名称以单词自动连接，且每个单词首字母大写

				-大驼峰，每个单词第一个字母均大写

					-在Python中给类命名使用此法

					-MyFirstLove，IntOne

				-小驼峰，类似大驼峰，但第一个字母小写

					-在Python中一般给普通变量或者函数命名

					-myFirstLove，intOne

				-posix写法
					-多个单词用下划线链接
					-单词全部小写
					-my_first_love，int_one

	-保留字和关键字
		-变量命名必须避开，不能跟关键字和保留字重复
		-class，def，break，for

	--------python代码演示-------

	#查看关键字的方法
	import keyword #引入关键字模块

	#打印出系统全部关键字
	print(keyword.kwlist)

	------------结束------------

	##变量声明

	- var_name = var_value
	- var1 = var2 = var3 =var_value
	- var1,var2,var3 = v1,v2,v3


	--------python代码演示-------

	# 定义变量age，把18放入变量age中
	age = 18
	print(age)
	print(18)
	#给age1，age2，age3放入同样一个内容或值
	age1 = age2 = age3 = 18
	print(age1)
	print(age2)
	print(age3)
	#一行内给多个变量赋值
	age4，age5，age6 = 12，21，45
	print(age4)
	print(age5)
	print(age6)

	------------结束------------

	## 变量类型
	-严格意义上讲，python只有一个类型
	-标准数据一共六种
		-数字类型Number
		-字符串类型str
		-列表list
		-元组tuple
		-字典Dictionary
		-集合set

	## Number数字类型
	-数字类型没有大小限制
	### 整数
		-没有小数部分，表示个数的数字
		-自然数，0，负自然数
		-整数分进制
			-二进制
				-计算机常用
				-是计算机唯一能直接理解的数字
				-表示为0b开头的0，1代码
				-例如 0b1101，0b10001
			-八进制
				-不常用
				-以0o开头的包含0-7的数字

			-十六进制
				-缝16进1
				-其实是每四位二进制表示一位十六进制数
				-包含0-9，a-f
				-数字上以0x开头表示
			-十进制
				-18，89，178


	--------python代码演示-------
	age = 18
	print(age)
	#十进制打印出是18

	age = 0b10010
	print(age)
	#二进制打印出来是18

	age = 0o102
	print(age)
	#八进制打印出来是66

	age = 0xff #十六进制ff表示二进制的1111 1111
	print(age)
	#十六进制打印出来是255

	------------结束------------

	### 浮点数
		-小数
		-计算机里边表示浮点数可以有条件省略
		-3.1415
		-3. #在python中可以这么写
		-0.5
		-.5 #在python中可以这么写，打印结果依然是0.5
		-科学计数法
			-定义跟数学定义
			-写法是用e/E后面跟整数数表示10的指数
			-176.23 == 1.7634e2
			-0.876 == 8.76e-1

	## 复数
		-定义同数学定义一致
		-一个由实部和虚部构成的数字
		-虚部用j/J表示
		-5+3j
		-3j
		-（3j）
	## 布尔值
		-表示真假的值
		-只有两个值，True/False
		-布尔值可以跟数字直接操作
		-True和False在py里面分别表示1和0
		-----py代码演示------
		age = 18+True
		print(age)
		#打印结果是19
		--------结束--------
	## 字符串
		-用来表示一串文字信息
		-如何表示
			-单引号
			-双引号
			-三引号（三个单引号或者三个双引号）
				-能够扩起多行信息
		-单双引号交错使用

		-----py代码演示------
		love = "你好，世界"
		print(love)

		love = 'hello world'
		print(love)

		#单双引号交错使用的例子
		#<a style="color:red">哈哈哈</a>
		#用引号表示上面的字符串
		html = '<a style="color:red">哈哈哈</a>'

		htmls = '''
			hello world
			你好 世界
			三引号表示多行
		'''

		print(htmls)
		--------结束--------
		-转义字符
		-格式化
		-内建函数（后延）

		## 转义字符
			-用一个特殊的方法表示出一系列不方便写出的内容，比如回车键，换行键，退格键
			-借助反斜杠字符，一旦字符串中出现反斜杠，则反斜杠后面一个或几个字符表示已经不是原来的意思了，进行了转义
			-在字符串中，一旦出现反斜杠就要加倍小心，可能由转义字符出现
				-windows: \n
				-linux: \r\n

		-----py代码演示------
		# 如果想表示出Let‘s go来
		# 1.可以使用嵌套引号，即外层使用双引号
		# 2.转义字符
		s = "let's go"
		print(s)
		# 打印结果let's go

		#\ '=='

		ss = 'let\'s go'
		print(ss)
		# 打印结果let's go

		#\\ = \

		sss = 'c:\\user'
		print(sss)
		# 打印结果c:\user

		# 回车换行符
		sl = 'hello \r\n world'
		print(sl)
		# 打印结果hello
		#world

		--------结束--------

		##字符串的格式化
			-把字符串按照一定格式打印或者填充
			-格式化由两种方法
				-利用百分号（%）
				-利用format函数
			###利用百分号格式化
				-在字符串中 ，利用%表示一个特殊的含义，表示对字符进行格式化
				-%d：此处应该放入一个整数
				-%s：表示此处应该放入一个字符串

			-----py代码演示------
			s = '%s hello world'
			print(s%'python')
			#打印出来的是python hello world

			ss = 'hello %b world'
			print(ss%666)
			#打印出来是hello 666 world

			#如果字符串中由占位符，则由几个占位符必须用几个实际内容代替，或者一个也不要
			sss = '%s hello %b world'
			#如果出现多个占位符，则相应内容需要用括号括起来
			print(sss%('python',666))
			#打印结果：python hello 666 world

			--------结束--------

			### format函数格式化字符串
				-直接用format函数进行格式化
				-推荐使用这种方法
				-在使用上，以{}和：代替%号，后面用format带参数完成

			-----py代码演示------
			s = '{} hello world'.format('python')
			print(s)
			#打印结果：python hello world

			ss = '{1}hello world,I love{1},I am {0}.'.format('Turingbei','python')
			print(ss)
			#打印结果：python hello world,I love python,I am Turingbei.

			--------结束--------

	## None
		-表示上面都没有
		-如果函数没有返回值，可以返回None
		-用来占位置
		-用来解除变量绑定
# 表达式
	-由一个或者几个数字或者变量和运算符组合成的一行代码
	-通常会返回一个结果

#运算符
	-由一个以上的值经过变化得到新值的过程就叫运算
	-用于运算的符号叫运算符
	-运算符分类：
		-算数运算符
		-比较或者关系运算符
		-赋值运算符
		-逻辑运算符
		-位运算
		-成员运算
		-身份运算符

	##算数运算符
		-进行算数运算的符号
		-python没有自增自减运算符

		-----py代码演示------
		#+，-跟正常算术运算符一模一样
		a = 9+3-2
		print(a)
		#打印结果：10

		#乘号用星号（*）代替
		aa = 9*4
		print(aa)
		#打印结果：36


		#除号用斜杠（/）代替
		#在python2.x和python3.x中，除号(/)结果可能不一致，此处以3系列为准
		aaa = 9/4
		print(aaa)
		#打印结果：2.25

		# % 取余运算
		#两个数字相除应该有商数有余数
		# % 只会得到余数
		aaaa = 9 % 4
		print(aaaa)
		#打印结果：1

		# // 表示取商运算，也叫地板除
		a5 = 9 // 4
		print(a5)
		#打印结果：2

		# ** 表示幂运算
		a6 = 9 ** 4
		print(a6)
		#打印结果：6561，相当于9的4次方，9乘了4次

		--------结束--------

	## 比较运算符
		-对两个变量或者值进行比较的运算符
		-比较的结果是布尔值，即True/False

		-----py代码演示------
		# == ，等于号
		a = 3 ** 4 
		# 下面语句执行顺序是
		#1. 计算 a == 80
		#2. 把结果放入b中
		b = a == 80
		print(b)
		#打印结果Fales

		# != 不等于
		print( 9 != 8)
		#打印结果：True

		# > 大于
		# < 小于
		# >= 大于等于
		# <= 小于等于
		--------结束--------
	## 赋值运算符
		-----py代码演示------
		# = 赋值
		a = 0
		c = a =4
		print(c)
		#打印结果：4

		# += 是缩写
		a = 0
		a += 7
		#a = a+7 的缩写
		print(a)
		#打印结果：7

		#所有数学运算符都有缩写形式
		# -= ，x= ，/= ，//= ，%= ，**= ，都是缩写形式

		--------结束--------

	## 逻辑运算符
		-对布尔值进行计算的符号
		- and 逻辑与
		- or 逻辑或
		- not 逻辑非
		-python中逻辑运算没有异或运算
		-运算规则
			-and看做乘法，or看做加法
			-True看做1，False看做0
			-则逻辑运算就能转换成整数数学运算
			-最后结果如果是0则为False，否则为True
		-逻辑运算的短路问题
			-逻辑运算式，按照运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回。

		-----py代码演示------	
		a = True
		b = False
		c = True

		#以下式子等价于 d = 1 * 0 + 1
		d = a and b or c
		print(d)
		#打印结果：True

		dd = a or b and a
		print(dd)
		#打印结果：True

		# 逻辑运算的短路案例
		#下面逻辑表达式，a的值一定是True，则进行到or的时候，整个表达式不在向下计算
		a = True or xxxx
		print(a)
		#打印结果：True

		#下面表达式，如果xxx中包含赋值表达式，则结果很难预期
		a = 1
		b = 1
		c = 3
		d = 4
		aa = a and b or (c and d)
		print(aa)
		#应该先运算c and d
		#打印结果：False (结果代验证)
		--------结束--------

	## 成员运算符号
		-用来检测某个变量是否是另一个变量的成员
		-in
		-ont in

		-----py代码演示------	
		#案例
		l = [1,2,3,4,5]
		a = 7
		b = a in l
		print(b)
		#打印结果：False 7没在l里面判断为7在l里面所以为False

		aa = 4
		bb = aa in l
		print(bb)
		#打印结果：True 4在l里面判断为4在l里面所以为Ture

		aaa = 4
		bbb = a not in l
		print(bbb)
		#打印结果：False 4在l里面判断为4不在l里面所以为False
		--------结束--------

	## 身份运算符
		-is：用来检测两个变量是否是同一个变量
			-语法就是 var1 is var2
		-is not：两个变量不是同一个变量
		-----py代码演示------	
		a = 9
		b = 9
		print(a is b)
		#打印结果： True

		aa = 'hello world'
		bb = 'hello world'
		print(aa is bb)
		#打印结果： False
		(待续。。。。)
		--------结束--------

	## 运算符的优先级问题
		-永远记住，括号具有最高优先级
		-优先级表格
			- ** 指数 (最高优先级)
			- ～ + = 按位翻转，一元加号和减号(最后两个的方法名为 +@ 和 -@)
			- * / % // 乘，除，取模和整除
			- + - 加法减法
			- >> << 右移，左移运算符
			- & 位'AND'
			- ^ | 位运算符
			- <= < > >= 比较运算符
			- <> == != 等于运算符
			- = %= /= //= -= += *= **= 赋值运算符
			- is  is not 身份运算符
			- in  in not 成员运算符
			- not or and 逻辑运算符

# 程序结构
	-顺序
	-分支
	-循环

# 分支
	-分支的基本语法
		if 条件表达式:
			语句1
			语句2
			语句3
			......

	-条件表达式就是计算结果必须为布尔值的表达式
	-表达式后面的冒号不能少
	-注意if后面的出现的语句，如果属于if语句块，则必须同一个缩紧等级
	-条件表达式结果为True执行if后面的缩进的语句块

	-----py代码演示------	
	#if语句练习
	#如果age小于18岁，则打印信息'去叫家长'

	age = 17
	if age < 18:
		print('去叫家长吧，孩子')
		print('我们不带你玩')
		print('滚蛋')
	#打印结果：去叫家长吧，孩子 我们不带你玩 滚蛋

	age1 = 19
	if age1 < 18:
		print('去叫家长吧，孩子')
		print('我们不带你玩')
		print('滚蛋')

	print('老司机，开车啦')
	#打印结果：老司机，开车啦

	--------结束--------

	## 双向分支
		-if...else...语句
			if 条件表达式:
				语句1
				语句2
				...
			else:
				语句1
				语句2
				...
		-双向分支有两个分支,当程序执行到if...else...语句的时候，一定会执行if或else中的一个，也仅执行一个
		-缩进问题，if和else一个层级，其余语句一个层级

		-----py代码演示------	
		#input的作用是
		#1.在屏幕上输出括号内的字符串
		#2.接受用户输入的内容并返回到程序
		#3.input返回的内容一定是字符串类型

		gender = input('请输入性别：')
		print('你输入的性别是：{0}'.format(gender))

		if gender == 'nan':
			print('来，我们纪念一下今天吧，代码敲十遍')
		else:
			print('发糖喽发糖喽')

		print('开始上课喽')
		--------结束--------			
	## 多路分支
		-很多分支的情况，简称多路分支
			if 条件表达式:
				语句1
				...
			elif 条件表达式:
				语句1
				...
			elif 条件表达式:
				语句1
				...
			.....
			else:
				语句1
				...
		-elif 可以有无限很多个
		-else可选，可有可无
		-多路分支只会选一个执行

		-----py代码演示------	
		# score 存放学生成绩
		# 注意input的返回值类型
		score = input('请输入学生成绩：')
		#需要把str转换成int
		score = int(score)

		if score >= 90:
			print('A')
		elif score >= 80:
			print('B')
		elif score >= 70:
			print('C')
		elif score >= 60:
			print('D')
		else:
			print('起开，我没你这傻学生')

		--------结束--------			
	## if语句其他:
		-if语句可以嵌套使用，但不推荐
		-python没有switch-case语句

# 循环语句
	-重复执行某些固定动作或者处理基本固定的事物
	-分类
		-for循环
		-while循环

	## for循环
		-for循环
			for  变量 in 序列:
				语句1
				语句2

	-----py代码演示------	
	### 列表就是一例数字或者其他值，一般用中括号表示
	### 例如 ['zhangsan'，'lisi'，'wangwu'，'jingjing']

	# 打印学生列表姓名
	# 如果是jingjing，那肯定是我的最爱
	# 如果是别打学生，要冷酷拒绝他

	for name in ['zhangsan'，'lisi'，'wangwu'，'jingjing']:
		print(name)
		if name == 'jingjing':
			print('我的最爱{0}出现了'.format(name))
		else:
			print('同学我们不约，不约，同学请自重')

	--------结束--------

	## range介绍
		- 生成一个数字序列
		- 具体范围可以设定

	-----py代码演示------	
	# range练习
	# 打印从1-10的数字
	# 注意，一般在python中，如果由表达数字范围的两个数，一般是包含左边数字不包含右边的数字
	# randint是特别，他左右都包含
	# range函数在python2 和 python3中有严重区别

	for i in range(1,11):
		print(i)
	#打印结果是1到10

	--------结束--------

	## for-else语句
		- 当for循环结束的时候，会执行else语句
		- else语句是可选语句，可有可无

	-----py代码演示------	
	# for-else语句
	# 打印列表中的同学
	# 如果没有在列表中，或者列表结束了，我们需要打印提示语句，表示不在爱了

	# 打印学生列表姓名
	# 如果是jingjing，那肯定是我的最爱
	# 如果是别打学生，要冷酷拒绝他

	for name in ['zhangsan'，'lisi'，'wangwu'，'jingjing']:
		print(name)
		if name == 'jingjing':
			print('我的最爱{0}出现了'.format(name))
		else:
			print('同学我们不约，不约，同学请自重')
	else:
		print('别的都表示我的同学，不会在爱啦')

	--------结束--------

	## 循环之break，continue，pass
		- break: 无条件结束整个循环，简称循环猝死
		- continue: 无条件结束本次循环，从新进入下一轮循环
		- pass: 表示略过

	-----py代码演示------	

	# for循环中的变量表示，一般用i，k，m，n，或者indx，idx，item之类
	# 在python中，如果循环变量名称不重要，可以用下划线（_）代替

	# break语句练习
	# 在数字1-10中，寻找数字7，一旦找到，打印出来，其余则什么都不做
	for i in range(1,11):
		
		if i == 7:
			print('找到啦')
			break
		else:
			print(i)

	# continue语句练习
	# 在数字1-10中，寻找所有偶数，找到偶数打印偶数
	for i in range(1,11):
		if i % 2 == 1:
			continue
		print('{0}是偶数'.format(i))

	# pass列子，一般用于占位
	# pass没有跳过功能
	for i in range(1,11):
		pass
		print('hello world')
		
	--------结束--------

	## while循环
		-一个循环语句
		-表示当某条件成立的时候，就循环
		-不知道具体循环次数，但能确定循环的成立条件的时候用while循环
		-while语法：
			while 条件表达式:
				语句块

			# 另外一种表达方法
			while 条件表达式:
				语句块1
			else:
				语句块2

	-----py代码演示------	
	# 如果说年利率是6.7%。本利是每年翻滚，则多少年后本钱会翻倍

	benqian = 100000
	year = 0
	while benqian < 200000:
		benqian = benqian * (1+0.067)
		year += 1 
		# year = year + 1
		print('第{0}年拿了{1}块钱'.format(year,benqian))

	--------例子2-------
	# 如果说年利率是6.7%。本利是每年翻滚，则多少年后本钱会翻倍
	# 如果拿到的钱翻倍，则用print庆祝一下

	benqian = 100000
	year = 0
	while benqian < 200000:
		benqian = benqian * (1+0.067)
		year += 1 
		# year = year + 1
		print('第{0}年拿了{1}块钱'.format(year,benqian))
	else:
		print('10多年终于翻倍啦')


	--------结束--------

# 函数
	- 代码的一种组织形式
	- 一个函数一般完成一项特定的功能
	- 函数使用
		- 函数需要先定义
		-使用函数，俗称调用

	-----py代码演示------	
	# 定义一个函数
	# 只是定义的话不会执行
	# 1. def关键字，后面跟个空格
	# 2. 函数名，自己定义，起名需要遵循变量命名规则，约定俗成，大驼峰命名只给类用
	# 3. 后面括号和冒号不能省，括号内可以由参数
	# 4. 函数内所有代码缩进

	def func():
		print('我是个函数')
		print('我要完成一定功能')
		print('我结束啦')
	# 函数的调用
	# 直接函数名后面跟括号

	func()	
	#打印结果：我是个函数 我要完成一定功能 我结束啦

	--------结束--------

	## 函数的参数和返回值
		-参数：负责给函数传送一些必要的数据或者信息
			- 形参（形式参数）：在函数定义的时候用到的参数没有具体值，只是一个占位的符号，成为形参
			- 实参（实际参数）：在调用函数的时候输入的值

		-返回值：函数的执行结果
			- 使用return关键字
			- 如果没有return，默认返回一个None
			- 函数一旦执行return语句，则无条件返回，即结束函数的执行

	# 查找函数帮助文档
	# 1. 用help函数
	help(print)

	-----py代码演示------	
	# 参数的定义和使用
	# 参数的person只是一个符号，代表的是调用的时候的某一个数据
	# 调用的时候，会用p的值代替函数中所有的person

	def hello(person):
		print('{0},hello world'.format(person))


	p = 'python'
	hello(p)
	#打印结果:python,hello world

	-------------------
	# return语句的基本使用
	# 函数打完招呼后返回一句话
	def hello(person):
		print('{0},hello world'.format(person))
		return '我已经跟{0}打过招呼啦'.format(person)

	p = 'python'
	rst = hello(p)
	print(rst)
	#打印结果:我已经跟python打过招呼啦

	-------------------
	# return案例2

	def hello(person):
		print('{0},hello world'.format(person))
		return '我提前结束啦'
		print('函数已结束啦，我是不执行的语句')

	p = 'python'
	rst = hello(p)
	print(rst)
	#打印结果：我提前结束啦

	--------练习--------
	# 九九乘法表

	for row in range(1,10):
		#打印一行
		for col in range(1,row+1):
			print(row * col,end=' ')

		print(end='\n')

	#打印结果：九九乘法表

	-------------------
	# 定义一个函数，打印一行九九乘法表

	def printLine(row):
		for col in range(1,row+1):
			print(row * col,end=' ')

		print(end='\n')

	# 九九乘法表
	# version 2.0

	for row in range(1,10):
		printLine(row)


	--------结束--------

	## 参数详解
		- 参考资料:(https://www.cnblogs.com/bingabcd/p/6671368.html)
		- python参考资料: headfirst python -->习题-->后期可以考虑腾讯公开免费课-->本笔记参考(流畅的python)
		- 参数分类
			- 普通参数
			- 默认参数
			- 关键字参数
			- 收集参数
	- 普通参数
		- 参见上例
		- 定义到时候直接定义变量名
		- 调用的时候直接把变量或者值放入指定位置

			def 函数名(参数1,参数2,...)
				函数体

			# 调用
			函数名(valuel,value2,...)

			# 调用的时候，具体值参考的是位置，按位置赋值
	- 默认参数
		- 形参带有默认值
		- 调用的时候，如果没有对相应形参赋值，则使用默认值

			def func_name(p1=v1,p2=v2,......)
				func_block

			#调用1
			func_name()

			#调用2
			value1 = 100
			value2 = 200
			func_name(value1,value2)

		-----py代码演示------	

		# 默认参数示例
		# 报名函数,需要知道学生性别
		# 学习python的学生基本都是男生，所以，报名的时候如果没有特别指定，我们任务是男生

		def reg(name,age,gender='male'):
			if gender == 'male':
				print('{0} is {1}，and he is a good student'.format(name,age))
			else:
				print('{0} is {1}, and she is a good student'.format(name,age))

		#调用默认参数函数案例1
			reg('xiaoming',21)
		#调用默认参数函数案例1
			reg('xiaohua',22,'female')

		--------结束--------

	- 关键字参数
		- 语法

			def func(p1=v1,p2=v2,...):
				func_body

			调用函数:
			func(p1=value1,p2=value2,...)

		- 比较麻烦，但也有好处:
			- 不容易混淆，一般实参和形参只是按照位置一一对应即可，容易出错
			- 使用关键字参数，可以不考虑参数位置

		-----py代码演示------		

		# 普通参数案例

		def stu(name, age, addr):
			print('I am a student')
			print('我叫{0},我今年{1}岁了,我住{2}'.format(name,age,addr))

		n = 'jingjing'
		a = 18
		addr = '我家'

		# 普通参数，只是按照位置传递，容易出错
		stu(a, n, addr)

		-------------------

		# 关键字参数案例

		def stu_key(name='no name', age=0, addr='no addr'):
			print('I am a student')
			print('我叫{0},我今年{1}岁了,我住{2}'.format(name,age,addr))

		n = 'jingjing'
		a = 18
		addr = '我家'

		# 关键字参数不容易出错
		stu(age=a, name=n, addr=addr)


		--------结束--------

	- 收集参数
		- 把没有位置，不能和定义时的参数位置相对应的参数，放入一个特定的数据结构中
		- 语法

			def func(*args):
				func_body
				按照list使用方式访问args得到传入的参数

			调用:
			func(p1, p2, p3, ...)

		- 参数名args不是必须这么写，但是，我们推荐直接用args，约定俗成
		- 参数名args前需要由星号（*）开头
		- 收集参数可以和其他参数共存

		-----py代码演示------	

		# 收集参数代码
		# 函数模拟一个学生进行自我介绍，但具体内容不清楚
		# args把他看做一个list


		def stu(*args):
			print('hello 大家好，我自我介绍一下，简单说两句：')
			# type函数作用是检测变量的类型
			print(type(args))
			for item in args:
				print(item)


		stu('hubeibei', 18, '杭州', 'zhu ao', 'single')

		stu('guxudong')

		# 说明收集参数可以不带任何实参调用，此时收集参数为空tupel
		stu()

		# 如果使用关键字参数格式调用，会出现问题

		--------结束--------

		## 收集参数之关键字收集参数
			- 把关键字参数按字典格式存入收集参数
			- 语法：

				def func( **kwargs):
					func_body

				# 调用:
				func(p1=v1, p2=v2, p3=v3,...)

			- kwargs一般约定俗成
			- 调用的时候，把多余的关键字参数放入kwargs
			- 访问kwargs需要按字典格式访问

			-----py代码演示------	
			# 收集参数案例
			# 自我介绍
			# 调用的时候需要使用关键字参数调用

			def stu( **kwargs):
				# 在函数体内对于kwargs的使用不用带星号
				print('hello 大家好，我先自我介绍一下：')
				print(type(kwargs))
				# 对于字典的访问，python2 和 python3有区别
				for k,v in kwargs.items():
					print(k, '---', v)

			stu(name='bei', age=18, addr='杭州', lover='祝奥')

			# 字符串乘以50，相当于50个星号
			print('*' * 50)

			stu(name='guxudong')

			# 收集参数可以为空案例

			stu()

			--------结束--------

		## 收集参数混合调用的顺序问题
			- 收集参数，关键字参数，普通参数可以混合使用
			- 使用规则就是，普通参数和关键字参数优先
			- 定义的时候一般找普通参数，关键字参数，收集参数tuple，收集参数dict

			-----py代码演示------	
			# 收集参数混合调用案例
			# stu模拟一个学生的自我介绍

			def stu(name, age, *args, hobby='没有',  **kwargs):
				print('hello 大家好')
				print('我叫{0},我今年{1}大了。'.format(name, age))
				
				if hobby == '没有':
					print('我没有爱好')
				else:
					print('我的爱好是{0}'.format(hobby))

				print('*' * 20)

				for i in args:
					print(i)

				print('#' * 20)

				for k,v in kwargs.items():
					print(k, '----', v)

			# 开始调用函数
			name = 'bei'
			age = 19

			# 调用不同格式
			stu(name, age)

			stu(name, age, hobby='游泳')

			stu(name, age, 'bei', 'Turing', hobby='游泳', hobby2='吃饭', hobby3='睡觉')

			--------结束--------

		## 收集参数的解包问题
			- 把参数放入list或者字典中，直接把list/dict中的值放入收集参数中
			- 语法：参看案例

			-----py代码演示------	

			# 收集参数的解包问题

			def stu(*args):
				print('哈哈哈')
				# n 用来表示循环次数
				# 主要用来调试

				n = 0
				for i in args:
					print(type(i))
					print(n)
					n += 1
					print(i)

			stu('bei', 'Turing', 19, 200)

			l = ['bei', 19, 230, 'Turing' ]
			
			stu(l)

			# 此时，args的表示形式是字典内一个list类型的元素，即 arg= (['bei', 19, 200, 'Turing'],)
			# 很显然跟我们最初的想法违背

			# 此时的调用， 我们就需要解包符号，即调用的时候前面加一个星号
			stu(*l)

			--------结束--------

			### 同理，dict类型收集参数一样可以解包，但是
				- 对dict类型进行解包
				- 需要用两个星号进行解包


	## 返回值
		- 函数和过程的区别
			-有无返回值
		- 需要用relurn显示返回内容
		- 如果没有返回，则默认返回None
		- 推荐写法，无论有无返回值，最后都要以return 结束

		-----py代码演示------	
		# 返回值示例

		def func_1():
			print('有返回值呀')
			return 1

		def func_2():
			print('没有返回值')

		f1 = func_1()
		print(f1)
		# 打印结果：1

		f2 = func_2()
		print(f2)
		# 打印结果：None

		--------结束--------

	## 函数文档
		- 函数的文档的作用是对当前函数提供使用相关的参考信息
		- 文档写法：
			- 在函数内部开始的第一行使用三字符串定义符
			- 一般具有特定格式
			- 参看案例
		- 文档查看
			- 使用help函数，例如 help(func)
			- 使用_doc_，查看案例

		-----py代码演示------

		# 文档案例
		# 函数stu是模拟一个学生的自我介绍的内容
		def stu(name, age, *args):
			'''
			这是一段hello world
			:param name: 表示学生的姓名
			:param age: 表示学生的年龄
			:return: 此函数没有返回值
			'''
			print('hello world')

		# 查看函数

			print(help(stu))

			print('*' * 20)

			print(stu._doc_)

		--------结束--------

# 变量作用域
	- 变量由作用范围限制
	- 分类：按照作用域分类
		- 全局(global)：在函数外部定义
		- 局部(local)：在函数内部定义
	- 变量都作用范围：
		- 全局变量：在整个全局范围都有效
		- 全局变量在局部可以使用（即函数内部可以方位函数外部定义的变量）
		- 局部变量在局部范围可以使用
		- 局部变量在全局范围无法使用
	- LEGB原则
		- L(Local)局部作用域
		- E(Enclosing function locale)外部嵌套函数作用域
		- G(Global module)函数定义所在模块作用域
		- B(Buildin)python内置魔抗的作用域

	-----py代码演示------
	# 认为a1是全局的
	a1 = 100

	def fun():
		print(a1)
		print('Turing')
		# a2的作用范围是fun
		a2 = 99
		print(a2)

	print(a1)
	fun()


	--------结束--------

	## 提升局部变量为全局变量
		- 使用global
		- 案例如下

		-----py代码演示------
		def fun():
			global b1
			b1 = 100
			print(b1)
			print('Turing')
			
		fun()
		print(b1)
		--------结束--------

# globals, locals函数
	- 可以通过globals个locals显示出局部变量和全局变量
	- 参看以下案例

	-----py代码演示------
	# globals 和 locals
	# globals 和 locals 叫做内建函数
	a = 1
	b = 2

	def fun(c,b):
		e = 111
		print('locals={0}'.format(locals()))
		print('Globals={0}'.format(globals()))

	fun(100,200)

	--------结束--------

# eval()函数
	- 把一个字符串当成一个表达式来执行，返回表达式执行后的结果
	- 语法:
		eval(string_code, globals=None, locals=None)

	-----py代码演示------
	# eval示例

	x = 100
	y = 200
	# 执行x+y
	# z = x + y
	z1 = x + y
	z2 = eval('x+y')

	print(z1)
	print(z2)
	# 打印结果都是 300

	--------结束--------

# exec()函数
	- 跟eval功能类似，但是，不返回结果
	- 语法：
		exec(string_code, globals=None, locals=None)

	-----py代码演示------
	# exec示例

	x = 100
	y = 200
	# 执行x+y
	# z = x + y
	z1 = x + y

	# 1. 注意字符串中引号的写法
	# 2. 比对exec执行结果和代码执行结果
	z2 = exec('print("x+y:", x+y)')

	print(z1)
	print(z2)
	# 打印结果都是 300

	--------结束--------

# 递归函数
	- 函直接或者间接调用自身
	- 优点：简洁，理解容易
	- 缺点：对递归深度有限制，消耗资源大
	- python对递归深度有限制，超过限制报错
	- 在写递归程序的时候，一定注意结束条件

	-----py代码演示------
	# 递归调用深度限制代码

	x = 0
	def fun():
		x += 1
		print(x)
		# 函数自己调用自己
		fun()

	# 调用函数
	fun()
	-------------------
	# 斐波那契数列
	# 一列数字，第一个值是1，第二个也是1，从第三个开始，每一个数字的值等于钱两个数字出现的值的和
	# 数学公式为: f(1) = 1, f(2) = 1, f(n) = f(n-1) + f(n-2)
	# 列如：1,1,2,3,5,8,13.......

	# 下面求斐波那契数列函数有一定问题，比如n一开始就是负数，如果修正
	# n表示求第n个数字的斐波那契数列的值
	def fib(n):
		if n == 1:
			return 1
		if n == 2:
			return 1

		#思考：为什么后面return能够正确执行，而不用else语句

		return fib(n-1) + fib(n-2)

	print(fib(3))
	# 打印结果：3

	print(fib(10))
	# 打印结果：55

	--------结束--------

# 汉诺塔问题
	- 规则:
		1. 每次移动一个盘子
		2. 任何时候大盘子在下面，小盘子在上面
	- 方法:
		1. n = 1: 直接把A上的一个盘子移动到C上，A->C
		2. n = 2:
			A. 把小盘子从A放到B上，A->b
			B. 把大盘子从A放到C上，A->C
			C. 把小盘子从B放到C上，B->C
		3. n = 3:
			A. 把A上的两个盘子，通过C移动到B上去，调用递归实现
			B. 把A上剩下的一个最大盘子移动到C上，A->C
			C. 把B上两个盘子，借助于A，挪到C上去，调用递归
		4. n = n:
			A. 把A上的n-1个盘子，借助于C，移动到B上去，调用递归
			B. 把A上的最大盘子，也是唯一一个，移动到C上，A->C
			C. 把B上n-1个盘子，借助于A，移动到C上，调用递归

	-----py代码演示------
	
	def hano(n, a, b, c):
		'''
		汉诺塔到递归实现
		n: 代表几个塔
		a: 代表第一个塔，开始的塔
		b: 代表第二个塔，中间过滤的塔
		C: 代表第三个塔，目标塔
		'''

		if n == 1:
			print(a, '-->', c)
			return None

		if n == 2:
			print(a, '-->', b)
			print(a, '-->', c)
			print(b, '-->', c)
			return None

		# 把n-1个盘子。从a塔借助于c塔，挪到b塔上去
		hano(n-1, a, c, b)
		print(a, '-->', c)

		# 把n-1个盘子，从b塔，借助于a塔，挪到c塔上去
		hano(n-1, b, a, c)

	a = 'A'
	b = 'B'
	C = 'C'

	n = 2
	hano(n, a, b, c)
	# 打印结果: A --> B A --> C B --> C

	--------结束--------



# 内置数据结构(变量类型)
	- list
	- set
	- dict
	- tuple

## list(列表)
	- 一组由顺序的数据的组合
	- 创建列表
		- 空列表

	-----py代码演示------

	# 1.创建空列表
	l1 = []

	# type是内置函数，负责打印出变量的类型
	print(type(l1))

	# 2.创建带值的列表
	l2 	= [100]
	print(type(l2))
	print(l2)

	# 3.创建列表，带多个值
	l3 = [2,3,1,4,6,4,6]
	print(type(l3))
	print(l3)

	# 4.使用list()
	l4 = list()
	print(type(l4))
	print(l4)

	--------结束--------

## 列表操作
	- 访问
		- 使用下标操作(索引)
		- 列表的位置是从0开始
	- 分片操作
		- 对列表进行任意一段的截取
		- l[:]

	-----py代码演示------

	# 下标访问列表

	l = [3,2,1,4,6,3,2]
	print(l[3])
	# 打印结果：4
	print(l[0])
	# 打印结果：3

	-------------------

## 分片操作
	# 注意截取的范围，包含左边的下标值，不包含右边的下标值

	l = [3,2,1,4,6,3,2]

	print(l[0:3])
	# 打印结果：[2,1,4]

	# 下标值可以为空，如果不写，左边下标值默认为0，右边下标值为最大数加一，即表示截取到最后一个数据
	print(l[:])
	# 打印结果：[3,2,1,4,6,3,2]

	print(l[:4])
	# 打印结果：[3,2,1,4]

	print(l[2:])
	# 打印结果：[1,4,6,3,2]

	# 分片可以控制增长幅度，默认增长幅度为1
	print(l[1:6:1])
	# 打印结果：[2, 1, 4, 6, 3]

	# 打印从下标1开始的数字，每次隔一个
	print(l[1:6:2])
	# 打印结果：[2, 4, 3]

	# 下标可以超出范围，超出后不在考虑多余下标内容
	print(l[2:10])
	# 打印结果：[1, 4, 6, 3, 2]

	# 下标值，增长幅度可以为负数
	# 为负数，表明顺序是从右往左
	# 规定：数组最后一个数字的下标是-1

	# 分片之负数下标
	# 下面显示的为空，因为默认分片总是从左向右截取
	# 即正常情况，分片左边的值一定小于右边的值
	print(l[-4:-2])
	# 打印结果：[4, 6]

	# 如果分片一定左边值比右边大，则步长参数需要使用负数
	# 此案例为一个list直接正反颠倒提供了一种思路
	print(l[-2:-4:-1])
	# 打印结果：[3, 6]

	--------结束--------

## 分片操作是生成一个新的list
    - 内置函数id，负责显示一个变量或者数据的唯一确定编号
	
	-----py代码演示------

	# id函数举例
	a = 100
	b = 200
	print(id(a))
	print(id(b))

	c = a
	print(id(c))

	# 如果a跟c只想一份数据，则更改a的值同样也会更改c的值
	# 但是，显示结果并非如此，为什么？
	a = 101
	print(a)
	print(c)

	# 通过id可以直接判断出分片是从新生成了一份数据还是使用的同一份数据
	l = [3, 4, 56, 76, 32, 21, 43, 5]
	ll = l[:]
	lll = ll

	# 如果两个id值一样，则表明分片产生的列表是使用的同一地址同一份数据
	# 否则，则表明分片是从新生成了一份数据，即一个新的列表，然后把数值拷贝到新列表中
	print(id(l))
	print(id(ll))
	print(id(lll))

	# 通过id知道，ll和lll是同一份数据，验证代码如下
	l[1] = 100
	print(ll)
	print(lll)

	--------结束--------

## del：删除命令

 	-----py代码演示------
 	# del 删除
 	a = [1, 2, 3, 4, 5, 6]
 	del a[2]
 	print(a)
 	# 打印结果: [1, 2, 4, 5, 6]

 	# del 删除
 	# 如果使用del之后，id的值和删除前不一样，则说明删除生成一个新的list
 	b = [1, 2, 3, 4, 5, 6]
 	print(id(a))
 	del a[2]
 	print(id(a))
 	print(a)
 	# 打印结果：id都一样，没有重新生成新的list

 	#del一个变量后不能在继续使用此变量


 	--------结束--------

## 使用加号链接两个列表

	-----py代码演示------

	a = [1, 2, 3, 4, 5]
	b = [5, 6, 7, 8, 9]
	d = ['a', 'b', 'c']
	c = a + b + c
	print(c)
	# 打印结果: [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 'a', 'b', 'c']

	--------结束--------

## 使用乘号操作列表
	
	-----py代码演示------

	# 列表直接跟一个整数相乘
	# 相当于把n个列表接在一起
	a = [1, 2, 3, 4, 5]
	b = a * 3
	print(b)
	#打印结果：[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]

	--------结束--------

## 成员资格运算

	-----py代码演示------

	# 就是判断一个元素是否在list里面
	a = [1, 2, 3, 4, 5, 6]
	b = 8
	
	# c的值是一个布尔值
	c = b in a
	print(c)
	# 打印结果：False

	b = 4
	print(b in a)
	# 打印结果：True

	# not in
	a = [1, 2, 3, 4, 5]
	b = 9
	print(b not in a)
	# 打印结果：True

	--------结束--------

## 列表的遍历
	- for
	- while

	-----py代码演示------

	# for in list
	a = [1, 2, 3, 4, 5]

	# 挨个打印a里面的元素
	for i in a:
		print(i)
		# 打印结果：1 2 3 4 5

	-------------------

	# range
	# in 后面的变量要求是可以可迭代的内容
	for i in range(1, 5):
		print(i)
		# 打印结果：1 2 3 4 5

	print(type(range(1,5)))
	# 打印结果：range

	-------------------

	# while循环访问list
	# 一般不用while遍历list

	a = [1, 2, 3, 4, 5, 6]
	length =len(a)

	#indx表示的是list的下标
	indx = 0
	while indx < length:
		print(a[indx])
		indx += 1

	-------------------

	# 双层列表循环
	# a为嵌套列表，或者叫双层列表
	a = [['one', 1],['two', 2],['three', 3]]

	for k,v in a:
		print(k, '--', v)
		# 打印结果：one--1 two--2 three--3

	-------------------

	# 双层列表循环变异

	# a为嵌套列表，或者叫双层列表
	a = [['one', 1, 'eins'],['two', 2, 'zwei'],['three', 3, 'drei']]
	# 这个例子说明，k，v，w的个数应该跟解包出来的变量个数一致

	for k,v,w in a:
		print(k, '--', v, '--', w)
		# 打印结果：one -- 1 -- eins two -- 2 -- zwei three -- 3 -- drei

	--------结束--------

## 列表内涵：list content
	- 通过简单方法创作列表

	-----py代码演示------

	# for 创建
	a = ['a', 'b', 'c']
	# 用list a 创建一个list b
	# 下面代码的含义是，对于所有a中的元素，逐个放入新列表b中
	b = [i for i in a]
	print(b)
	# 打印结果：['a', 'b', 'c']

	# 对a中所有元素乘以10，生成一个新list
	a = [1, 2, 3, 4, 5]
	# 用list a 创建一个list b
	# 下面代码的含义是，对于所有a中的元素，逐个放入新列表b中
	b = [i*10 for i in a]
	print(b)
	# 打印结果：[10, 20, 30, 40, 50]

	# 还可以过滤原来list中的内容并放入新列表
	# 比如原有列表a，需要把所有a中的偶数生成新的列表b

	a = [x for x in range(1,35)] # 生成从1到34的一个列表
	# 把a中所有的偶数生成一个新列表b
	b = [m for m in a if m % 2 == 0]
	print(b)
	# 打印结果：[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]

	# 列表生成式可以嵌套
	# 由两个列表a, b
	a = [i for i in range(1,4)]# 生成list a
	print(a)
	# 打印结果：[1, 2, 3]
	b = [i for i in range(100,400) if i % 100 == 0]
	print(b)
	# 打印结果：[100, 200, 300]

	# 列表生成是可以嵌套
	c = [ m+n for m in a for n in b]
	print(c)
	# 打印结果：[101, 201, 301, 102, 202, 302, 103, 203, 303]

	# 上面代码跟下面代码等价
	for m in a:
		for n in b:
			print(m+n, end=' ')
			# 打印结果：101 201 301 102 202 302 103 203 303
	print()

	# 嵌套的列表生成也可以用条件表达式
	c = [ m+n for m in a for n in b if m+n < 250]
	print(c)
	# 打印结果：[101, 201, 102, 202, 103, 203]

	--------结束--------

## 关于列表的常用函数
	- len：求列表的长度
	- max：求列表中的最大值
	- list：将其他格式的数据转换成list


	-----py代码演示------

	a = [x for x in range(1,100)]

	# len求列表的长度
	print(len(a))
	# 打印结果：99

	# max求列表中的最大值
	print(max(a))
	# 打印结果：99
	b = ['man', 'film', 'python']
	print(max(b))
	# 打印结果：python

	# list将其他格式的数据转换成list
	a = [1, 2, 3]
	print(list(a))
	# 打印结果：[1, 2, 3]
	s = 'Turingbei'
	print(list(s))
	# 打印结果：['T', 'u', 'r', 'i', 'n', 'g', 'b', 'e', 'i']
	# 把range产生的内容转换成list
	print（list(range(12, 19))
	# 打印结果：[12, 13, 14, 15, 16, 17, 18]

	--------结束--------


